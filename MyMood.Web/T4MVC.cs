// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class MVC
{
    public static MyMood.Web.Controllers.ActivityController Activity = new MyMood.Web.Controllers.T4MVC_ActivityController();
    public static MyMood.Web.Controllers.AppController App = new MyMood.Web.Controllers.T4MVC_AppController();
    public static MyMood.Web.Controllers.CalloutController Callout = new MyMood.Web.Controllers.T4MVC_CalloutController();
    public static MyMood.Web.Controllers.EventController Event = new MyMood.Web.Controllers.T4MVC_EventController();
    public static MyMood.Web.Controllers.EventLogController EventLog = new MyMood.Web.Controllers.T4MVC_EventLogController();
    public static MyMood.Web.Controllers.HomeController Home = new MyMood.Web.Controllers.T4MVC_HomeController();
    public static MyMood.Web.Controllers.MoodController Mood = new MyMood.Web.Controllers.T4MVC_MoodController();
    public static MyMood.Web.Controllers.MoodPromptController MoodPrompt = new MyMood.Web.Controllers.T4MVC_MoodPromptController();
    public static MyMood.Web.Controllers.PushNotificationController PushNotification = new MyMood.Web.Controllers.T4MVC_PushNotificationController();
    public static MyMood.Web.Controllers.ReportController Report = new MyMood.Web.Controllers.T4MVC_ReportController();
    public static MyMood.Web.Controllers.ResponderController Responder = new MyMood.Web.Controllers.T4MVC_ResponderController();
    public static MyMood.Web.Controllers.UserController User = new MyMood.Web.Controllers.T4MVC_UserController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_System_Web_Mvc_ViewResult : System.Web.Mvc.ViewResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ViewResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_System_Web_Mvc_JsonResult : System.Web.Mvc.JsonResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_JsonResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string common_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/common.min.js") ? Url("common.min.js") : Url("common.js");
                      
        public static readonly string fabric_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fabric.min.js") ? Url("fabric.min.js") : Url("fabric.js");
                      
        public static readonly string jquery_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-vsdoc.min.js") ? Url("jquery-vsdoc.min.js") : Url("jquery-vsdoc.js");
                      
        public static readonly string moment_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/moment.min.js") ? Url("moment.min.js") : Url("moment.js");
                      
        public static readonly string mood_breakdown_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mood.breakdown.min.js") ? Url("mood.breakdown.min.js") : Url("mood.breakdown.js");
                      
        public static readonly string mood_map_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mood.map.min.js") ? Url("mood.map.min.js") : Url("mood.map.js");
                      
        public static readonly string mood_meter_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mood.meter.min.js") ? Url("mood.meter.min.js") : Url("mood.meter.js");
                      
        public static readonly string mood_tower_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mood.tower.min.js") ? Url("mood.tower.min.js") : Url("mood.tower.js");
                      
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class CSS {
            private const string URLPATH = "~/Content/CSS";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string app_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/app.min.css") ? Url("app.min.css") : Url("app.css");
                 
            public static readonly string install_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/install.min.css") ? Url("install.min.css") : Url("install.css");
                 
            public static readonly string jquery_ui_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui.min.css") ? Url("jquery-ui.min.css") : Url("jquery-ui.css");
                 
            public static readonly string report_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/report.min.css") ? Url("report.min.css") : Url("report.css");
                 
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class HtmlTemplates {
            private const string URLPATH = "~/Content/HtmlTemplates";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string HtmlTemplates_config = Url("HtmlTemplates.config");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class MailTemplates {
                private const string URLPATH = "~/Content/HtmlTemplates/MailTemplates";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string InterestAcknowledgedMail_htm = Url("InterestAcknowledgedMail.htm");
                public static readonly string InterestRegisteredMail_htm = Url("InterestRegisteredMail.htm");
                public static readonly string MailTemplateMaster_htm = Url("MailTemplateMaster.htm");
                public static readonly string PersonalMoodReportMail_htm = Url("PersonalMoodReportMail.htm");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Images {
            private const string URLPATH = "~/Content/Images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string BG_png = Url("BG.png");
            public static readonly string bored_png = Url("bored.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class callout {
                private const string URLPATH = "~/Content/Images/callout";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string All_Moods_svg = Url("All-Moods.svg");
                public static readonly string Bored__Left__png = Url("Bored-(Left).png");
                public static readonly string Bored__Right__png = Url("Bored-(Right).png");
                public static readonly string Bored_svg = Url("Bored.svg");
                public static readonly string Deflated__Left__png = Url("Deflated-(Left).png");
                public static readonly string Deflated__Right__png = Url("Deflated-(Right).png");
                public static readonly string Deflated_svg = Url("Deflated.svg");
                public static readonly string Disengaged__Left__png = Url("Disengaged-(Left).png");
                public static readonly string Disengaged__Right__png = Url("Disengaged-(Right).png");
                public static readonly string Disengaged_svg = Url("Disengaged.svg");
                public static readonly string Engaged__Left__png = Url("Engaged-(Left).png");
                public static readonly string Engaged__Right__png = Url("Engaged-(Right).png");
                public static readonly string Engaged_svg = Url("Engaged.svg");
                public static readonly string Excited__Left__png = Url("Excited-(Left).png");
                public static readonly string Excited__Right__png = Url("Excited-(Right).png");
                public static readonly string Excited_svg = Url("Excited.svg");
                public static readonly string Frustrated__Left__png = Url("Frustrated-(Left).png");
                public static readonly string Frustrated__Right__png = Url("Frustrated-(Right).png");
                public static readonly string Frustrated_svg = Url("Frustrated.svg");
                public static readonly string Logo_with_text_svg = Url("Logo-with-text.svg");
                public static readonly string logo_png = Url("logo.png");
                public static readonly string MoodTowerIcon_png = Url("MoodTowerIcon.png");
                public static readonly string Novartis_svg = Url("Novartis.svg");
                public static readonly string Optimistic__Left__png = Url("Optimistic-(Left).png");
                public static readonly string Optimistic__Right__png = Url("Optimistic-(Right).png");
                public static readonly string Optimistic_svg = Url("Optimistic.svg");
                public static readonly string Passionate__Left__png = Url("Passionate-(Left).png");
                public static readonly string Passionate__Right__png = Url("Passionate-(Right).png");
                public static readonly string Passionate_svg = Url("Passionate.svg");
                public static readonly string Proud__Left__png = Url("Proud-(Left).png");
                public static readonly string Proud__Right__png = Url("Proud-(Right).png");
                public static readonly string Proud_svg = Url("Proud.svg");
                public static readonly string Worried__Left__png = Url("Worried-(Left).png");
                public static readonly string Worried__Right__png = Url("Worried-(Right).png");
                public static readonly string Worried_svg = Url("Worried.svg");
            }
        
            public static readonly string deflated_png = Url("deflated.png");
            public static readonly string DiscoLogo_png = Url("DiscoLogo.png");
            public static readonly string disengaged_png = Url("disengaged.png");
            public static readonly string engaged_png = Url("engaged.png");
            public static readonly string excited_png = Url("excited.png");
            public static readonly string frustrated_png = Url("frustrated.png");
            public static readonly string Install_png = Url("Install.png");
            public static readonly string InstallText_png = Url("InstallText.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class jquery_ui_discover {
                private const string URLPATH = "~/Content/Images/jquery-ui.discover";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string ui_bg_diagonals_small_40_f87777_40x40_png = Url("ui-bg_diagonals-small_40_f87777_40x40.png");
                public static readonly string ui_bg_diagonals_small_55_fcefa1_40x40_png = Url("ui-bg_diagonals-small_55_fcefa1_40x40.png");
                public static readonly string ui_bg_flat_0_777777_40x100_png = Url("ui-bg_flat_0_777777_40x100.png");
                public static readonly string ui_bg_flat_0_aaaaaa_40x100_png = Url("ui-bg_flat_0_aaaaaa_40x100.png");
                public static readonly string ui_bg_flat_65_ffffff_40x100_png = Url("ui-bg_flat_65_ffffff_40x100.png");
                public static readonly string ui_icons_3e49cb_256x240_png = Url("ui-icons_3e49cb_256x240.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Log {
                private const string URLPATH = "~/Content/Images/Log";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string CriticalError_png = Url("CriticalError.png");
                public static readonly string Information_png = Url("Information.png");
                public static readonly string SeriousWarning_png = Url("SeriousWarning.png");
                public static readonly string Warning_png = Url("Warning.png");
            }
        
            public static readonly string Logo_png = Url("Logo.png");
            public static readonly string mymoodlogo_png = Url("mymoodlogo.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class report {
                private const string URLPATH = "~/Content/Images/report";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string Bored_jpg = Url("Bored.jpg");
                public static readonly string Bored_png = Url("Bored.png");
                public static readonly string Deflated_jpg = Url("Deflated.jpg");
                public static readonly string Deflated_png = Url("Deflated.png");
                public static readonly string Disengaged_jpg = Url("Disengaged.jpg");
                public static readonly string Disengaged_png = Url("Disengaged.png");
                public static readonly string Engaged_jpg = Url("Engaged.jpg");
                public static readonly string Engaged_png = Url("Engaged.png");
                public static readonly string Excited_jpg = Url("Excited.jpg");
                public static readonly string Excited_png = Url("Excited.png");
                public static readonly string frustrated_jpg = Url("frustrated.jpg");
                public static readonly string Frustrated_png = Url("Frustrated.png");
                public static readonly string logos_jpg = Url("logos.jpg");
                public static readonly string logos_png = Url("logos.png");
                public static readonly string myMoodLogo_png = Url("myMoodLogo.png");
                public static readonly string myMoodLogoNVS_png = Url("myMoodLogoNVS.png");
                public static readonly string myMoodLogoNVS_872_png = Url("myMoodLogoNVS_872.png");
                public static readonly string NovartisLogo_png = Url("NovartisLogo.png");
                public static readonly string optimistic_jpg = Url("optimistic.jpg");
                public static readonly string Optimistic_png = Url("Optimistic.png");
                public static readonly string Passionate_jpg = Url("Passionate.jpg");
                public static readonly string Passionate_png = Url("Passionate.png");
                public static readonly string proud_jpg = Url("proud.jpg");
                public static readonly string Proud_png = Url("Proud.png");
                public static readonly string Worried_jpg = Url("Worried.jpg");
                public static readonly string Worried_png = Url("Worried.png");
            }
        
        }
    
        public static readonly string Site_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Site.min.css") ? Url("Site.min.css") : Url("Site.css");
             
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class themes {
            private const string URLPATH = "~/Content/themes";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class @base {
                private const string URLPATH = "~/Content/themes/base";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class images {
                    private const string URLPATH = "~/Content/themes/base/images";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string ui_bg_flat_0_aaaaaa_40x100_png = Url("ui-bg_flat_0_aaaaaa_40x100.png");
                    public static readonly string ui_bg_flat_75_ffffff_40x100_png = Url("ui-bg_flat_75_ffffff_40x100.png");
                    public static readonly string ui_bg_glass_55_fbf9ee_1x400_png = Url("ui-bg_glass_55_fbf9ee_1x400.png");
                    public static readonly string ui_bg_glass_65_ffffff_1x400_png = Url("ui-bg_glass_65_ffffff_1x400.png");
                    public static readonly string ui_bg_glass_75_dadada_1x400_png = Url("ui-bg_glass_75_dadada_1x400.png");
                    public static readonly string ui_bg_glass_75_e6e6e6_1x400_png = Url("ui-bg_glass_75_e6e6e6_1x400.png");
                    public static readonly string ui_bg_glass_95_fef1ec_1x400_png = Url("ui-bg_glass_95_fef1ec_1x400.png");
                    public static readonly string ui_bg_highlight_soft_75_cccccc_1x100_png = Url("ui-bg_highlight-soft_75_cccccc_1x100.png");
                    public static readonly string ui_icons_222222_256x240_png = Url("ui-icons_222222_256x240.png");
                    public static readonly string ui_icons_2e83ff_256x240_png = Url("ui-icons_2e83ff_256x240.png");
                    public static readonly string ui_icons_454545_256x240_png = Url("ui-icons_454545_256x240.png");
                    public static readonly string ui_icons_888888_256x240_png = Url("ui-icons_888888_256x240.png");
                    public static readonly string ui_icons_cd0a0a_256x240_png = Url("ui-icons_cd0a0a_256x240.png");
                }
            
                public static readonly string jquery_ui_accordion_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.accordion.min.css") ? Url("jquery.ui.accordion.min.css") : Url("jquery.ui.accordion.css");
                     
                public static readonly string jquery_ui_all_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.all.min.css") ? Url("jquery.ui.all.min.css") : Url("jquery.ui.all.css");
                     
                public static readonly string jquery_ui_autocomplete_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.autocomplete.min.css") ? Url("jquery.ui.autocomplete.min.css") : Url("jquery.ui.autocomplete.css");
                     
                public static readonly string jquery_ui_base_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.base.min.css") ? Url("jquery.ui.base.min.css") : Url("jquery.ui.base.css");
                     
                public static readonly string jquery_ui_button_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.button.min.css") ? Url("jquery.ui.button.min.css") : Url("jquery.ui.button.css");
                     
                public static readonly string jquery_ui_core_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.core.min.css") ? Url("jquery.ui.core.min.css") : Url("jquery.ui.core.css");
                     
                public static readonly string jquery_ui_datepicker_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.datepicker.min.css") ? Url("jquery.ui.datepicker.min.css") : Url("jquery.ui.datepicker.css");
                     
                public static readonly string jquery_ui_dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.dialog.min.css") ? Url("jquery.ui.dialog.min.css") : Url("jquery.ui.dialog.css");
                     
                public static readonly string jquery_ui_progressbar_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.progressbar.min.css") ? Url("jquery.ui.progressbar.min.css") : Url("jquery.ui.progressbar.css");
                     
                public static readonly string jquery_ui_resizable_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.resizable.min.css") ? Url("jquery.ui.resizable.min.css") : Url("jquery.ui.resizable.css");
                     
                public static readonly string jquery_ui_selectable_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.selectable.min.css") ? Url("jquery.ui.selectable.min.css") : Url("jquery.ui.selectable.css");
                     
                public static readonly string jquery_ui_slider_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.slider.min.css") ? Url("jquery.ui.slider.min.css") : Url("jquery.ui.slider.css");
                     
                public static readonly string jquery_ui_tabs_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.tabs.min.css") ? Url("jquery.ui.tabs.min.css") : Url("jquery.ui.tabs.css");
                     
                public static readonly string jquery_ui_theme_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.theme.min.css") ? Url("jquery.ui.theme.min.css") : Url("jquery.ui.theme.css");
                     
            }
        
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;


    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591


